/*
このファイルの用途・使用方法
https://github.com/q-jutaku/coding_rule/blob/main/css.md#sassmixins
*/

@mixin clearfix {
  &:after {
    display: table;
    content: "";
    clear: both;
  }
}

@mixin after {
  content: "";
  display: block;
}

@mixin font-size($s) {
  font-size: $s * 10 + px;
  font-size: $s + rem;
}

@mixin textJustify {
  text-align: justify;
  text-justify: inter-ideograph;
}

@mixin none-appearance {
  appearance: none;
  -moz-appearance: none;
  -webkit-appearance: none;
  margin: 0;
  padding: 0;
  border: 0;
  border-radius: 0;
  background: none transparent;
  background-clip: padding-box;
  color: inherit;
  font-size: inherit;
  vertical-align: middle;
  box-sizing: border-box;
  &::-ms-clear {
    display: none;
  }
  &::-ms-reveal {
    display: none;
  }
  &::-ms-expand {
    display: none;
  }
}

@mixin triangle($color: #000, $width: 10px, $height: 10px, $dir: top) {
  width: 0;
  height: 0;
  @if $dir == "top" {
    border-width: 0 #{$width/2} #{$height} #{$width/2};
    border-color: transparent transparent $color transparent;
  } @else if $dir == "bottom" {
    border-width: #{$height} #{$width/2} 0 #{$width/2};
    border-color: $color transparent transparent transparent;
  } @else if $dir == "right" {
    border-width: #{$height/2} 0 #{$height/2} #{$width};
    border-color: transparent transparent transparent $color;
  } @else {
    border-width: #{$height/2} #{$width} #{$height/2} 0;
    border-color: transparent $color transparent transparent;
  }
  border-style: solid;
}

@mixin fadeUp {
  translate: 0 getSize(50vw);
  rotate: -0.0001deg;
  opacity: 0;
  transition: translate 0.6s, opacity 0.6s, rotate 0.6s;

  @include media(fom, min) {
    translate: 0 50px * 0.72;
    rotate: -0.0001deg;
  }
}

@mixin show {
  translate: 0 0;
  rotate: -0.0001deg;
  opacity: 1;
}

@mixin parent($target, $state) {
  @if is-inside($target) {
    @at-root #{selector-replace(&, $target, $target + $state)} {
      @content;
    }
  } @else {
    @if $target ==parent(#{&}) {
      @at-root #{selector-replace(&, parent(#{&}),
      $target +$state) } {
        @content;
      }
    } @else {
      @at-root #{selector-replace(&, parent(#{&}),
    $target +$state +" "+parent(#{&}))
          } {
        @content;
      }
    }
  }
}

@mixin minPc {
  @media (min-width: 768px) and (max-width: 1100px) {
    @content;
  }
}
@mixin minPcAlter {
  @media (min-width: 768px) and (max-width: 1200px) {
    @content;
  }
}
@mixin middle {
  @media (min-width: 768px) and (max-width: 1400px) {
    @content;
  }
}

@mixin gridBG {
  background-image: linear-gradient(0deg, transparent getSize(49vw), #E1E4E6 getSize(49vw), #E1E4E6 getSize(50vw)), linear-gradient(90deg, transparent getSize(49vw), #E1E4E6 getSize(49vw), #E1E4E6 getSize(50vw));
  background-size: getSize(50vw) getSize(50vw);
  background-repeat: repeat;
  mask-size: 204% 100%;
  mask-position: 100% 0;
  mask-image: linear-gradient(to right , #000 0%, #000 49%, transparent 51%, transparent 100%);
  will-change: mask-position;
  @include media(sp,min){
    background-image: linear-gradient(0deg, transparent 19px, #E1E4E6 19px, #E1E4E6 20px), linear-gradient(90deg, transparent 19px, #E1E4E6 19px, #E1E4E6 20px);
    background-size: 20px 20px;
    background-position: center top;
  }
}


@mixin hover {
  transition: opacity .2s;
  @media (hover: hover) {
    &:hover {
      cursor: pointer;
      opacity: .7;
    }
  }
}
